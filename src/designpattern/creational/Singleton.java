package designpattern.creational;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class Singleton {
}

class EagerInitializedSingleton {

    private static final EagerInitializedSingleton INSTANCE = new EagerInitializedSingleton();

    // Private constructor to avoid client applications to use constructor
    private EagerInitializedSingleton() {

    }
    public static EagerInitializedSingleton getInstance() {
        return INSTANCE;
    }
}

class ReflectionBreakSingleton {

    public static void main(String[] args)
            throws InstantiationException, IllegalAccessException, InvocationTargetException {

        EagerInitializedSingleton instanceOne = EagerInitializedSingleton.getInstance();
        EagerInitializedSingleton instanceTwo = null;

        Constructor<?>[] constructors = EagerInitializedSingleton.class.getDeclaredConstructors();
        for (Constructor<?> constructor : constructors) {
            constructor.setAccessible(true);
            instanceTwo = (EagerInitializedSingleton) constructor.newInstance();
        }

        System.out.println(instanceOne.hashCode());
        System.out.println(instanceTwo.hashCode());
    }
}

class StaticBlockSingleton {
    private static final StaticBlockSingleton INSTANCE;

    private StaticBlockSingleton() {

    }

    static {
        try {
            INSTANCE = new StaticBlockSingleton();
        } catch (Exception e) {
            throw new RuntimeException("Exception occured in creating singleton instance");
        }
    }

    public static StaticBlockSingleton getInstance() {
        return INSTANCE;
    }
}

// Kh·∫Øc ph·ª•c nh∆∞·ª£c ƒëi·ªÉm c·ªßa Eager ch·ªâ khi n√†o getInstance() th√¨ instance m·ªõi kh·ªüi t·∫°o.
// T·ªët trong tr∆∞·ªùng h·ª£p ƒë∆°n lu·ªìng.
// ƒêa lu·ªìng c√≥ th·ªÉ g·ªçi getInstance() c√πng 1 th·ªùi ƒëi·ªÉm => Nhi·ªÅu h∆°n 1 instance.
class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;

    private LazyInitializedSingleton() {
    }

    public static LazyInitializedSingleton getInstance() {
        if (instance == null) {
            instance = new LazyInitializedSingleton();
        }
        return instance;
    }
}

// C·∫£i ti·∫øn th√™m synchronized
class ThreadSafeLazyInitializedSingleton {

    private static volatile ThreadSafeLazyInitializedSingleton instance;

    private ThreadSafeLazyInitializedSingleton() {
    }

    public static synchronized ThreadSafeLazyInitializedSingleton getInstance() {
        if (instance == null) {
            instance = new ThreadSafeLazyInitializedSingleton();
        }
        return instance;
    }
}

/* Bi·∫øn volatile trong Java c√≥ t√°c d·ª•ng th√¥ng b√°o s·ª± thay ƒë·ªïi gi√° tr·ªã c·ªßa bi·∫øn t·ªõi c√°c thread kh√°c nhau
n·∫øu bi·∫øn n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu thread. */
class DoubleCheckLockingSingleton {

    private static volatile DoubleCheckLockingSingleton instance;

    private DoubleCheckLockingSingleton() {
    }

    public static DoubleCheckLockingSingleton getInstance() {
        // Do something before get instance ...
        if (instance == null) {
            // Do the task too long before create instance ...
            // Block so other threads cannot come into while initialize
            synchronized (DoubleCheckLockingSingleton.class) {
                // Re-check again. Maybe another thread has initialized before
                if (instance == null) {
                    instance = new DoubleCheckLockingSingleton();
                }
            }
        }
        // Do something after get instance ...
        return instance;
    }
}

/* V·ªõi c√°ch l√†m n√†y b·∫°n s·∫Ω t·∫°o ra static nested class v·ªõi vai tr√≤ 1 Helper khi mu·ªën t√°ch bi·ªát ch·ª©c nƒÉng
cho 1 class function r√µ r√†ng h∆°n. ƒê√¢y l√† c√°ch th∆∞·ªùng hay ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† c√≥ hi·ªáu su·∫•t t·ªët
(theo c√°c chuy√™n gia ƒë√°nh gi√° üôÇ ).
 */
class BillPughSingleton {

    private BillPughSingleton() {
    }

    public static BillPughSingleton getInstance() {
        return SingletonHelper.INSTANCE;
    }

    private static class SingletonHelper {
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }
}


